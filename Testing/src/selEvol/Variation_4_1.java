package selEvol;

import unalcol.search.solution.Solution;

public class Variation_4_1<T> extends Variation_4_m<T> {
	
	private int c =0;
	@Override
	public int range_arity() {
		return 1;
	};

	/**
	 * Apply the genetic operator to the four individuals in the population of
	 * parents This method is parent compatible
	 * 
	 * @param parents
	 *            Collection of parents used by the genetic operator (selects
	 *            just the first and second individuals in the collection
	 * @return A collection of individuals generated by the genetic operator
	 */
	@SuppressWarnings("unchecked")
	@Override
	public T[] apply(T... parents) {
		//System.out.println("Parents "+parents.length);
		//c=c+1;
		//System.out.println("c= "+c);
		int n = parents.length >> 2;
		T[] v = (T[]) (new Object[n]);
		for (int i = 0; i < n; i += 4) {
			T[] p = apply(parents[i], parents[i + 1], parents[i + 2], parents[i + 3]);
			v[i] = p[0];
		}
		return v;
	}

	/**
	 * Apply the genetic operator to the first and second individuals in the
	 * population of parents This method is parent compatible
	 * 
	 * @param parents
	 *            Collection of parents used by the genetic operator (selects
	 *            just the first and second individuals in the collection
	 * @return A collection of individuals generated by the genetic operator
	 */
	@Override
	@SuppressWarnings("unchecked")
	public Solution<T>[] apply(Solution<T>... parents) {
		//System.out.println("Parents "+parents.length);
		//c=c+1;
		//System.out.println("c= "+c);
		int n = parents.length >> 2;
		Solution<T>[] v = new Solution[n];
		for (int i = 0; i < n; i += 4) {
			Solution<T>[] p = apply(parents[i], parents[i + 1], parents[i + 2], parents[i + 3]);
			v[i] = p[0];
		}
		return v;
	}

}
